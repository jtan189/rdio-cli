#!/usr/bin/env python

from __future__ import division

import argparse
from datetime import datetime
from itertools import chain, islice
from functools import wraps
import logging
from random import shuffle
import readline
from urllib import urlencode
from urlparse import parse_qsl, urlunsplit
import webbrowser

try:
    import json
except ImportError:
    import simplejson as json

from termtool import Termtool, argument, subcommand
import rdioapi


class EchoNestError(Exception):

    def __init__(self, response):
        self.response = response

    @property
    def code(self):
        return self.response['response']['status']['code']

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.response['response']['status']['message']


def macapp(fn):
    @wraps(fn)
    def run_with_app(self, args, *pargs, **kwargs):
        try:
            from appscript import app, k
        except ImportError:
            logging.error("This command requires Rdio for Mac and the 'appscript' module.")
            return

        try:
            rdio = app('Rdio')
        except Exception, exc:
            logging.error("Could not find the Rdio app: %s: %s", type(exc).__name__, str(exc))
            return

        return fn(self, args, rdio, k, *pargs, **kwargs)
    return run_with_app


def authd(fn):
    @wraps(fn)
    def run_authorized(self, args, *pargs, **kwargs):
        access_token = args.access_token
        if access_token is None:
            logging.error("This command requires authorization to use your Rdio account; use 'configure' first to configure the tool with it.")
            return

        data_store = {'access_token': dict(parse_qsl(access_token))}
        logging.debug("ACCESS TOKEN: %r", data_store['access_token'])
        rdio = rdioapi.Rdio(args.consumer_token, args.consumer_secret, data_store)
        return fn(self, rdio, args, *pargs, **kwargs)
    return run_authorized


@argument('--consumer-token', help='Rdio API consumer token')
@argument('--consumer-secret', help='Rdio API consumer secret')
@argument('--access-token', help='Rdio access token (in web POST format)')
@argument('--echonest-key', help='Echo Nest API key')
class Rdio(Termtool):

    """Control Rdio from the command line."""

    @subcommand(help='configure the API keys')
    def configure(self, args):
        if not args.consumer_token:
            args.consumer_token = raw_input('Consumer token: ')
        if not args.consumer_secret:
            args.consumer_secret = raw_input('Consumer secret: ')
        if not args.access_token:
            data_store = dict()
            logging.debug("TOKEN IS: %r", args.consumer_token)
            rdio = rdioapi.Rdio(args.consumer_token, args.consumer_secret, data_store)
            login_url = rdio.begin_authentication('oob')

            print "Open this URL in your web browser to get an API PIN:"
            print
            print "    ", login_url
            print
            verifier = raw_input("PIN: ")

            rdio.complete_authentication(verifier)

            assert data_store['access_token'], "Authentication did not provide an access token"
            logging.debug("ACCESS TOKEN: %r", data_store['access_token'])
            args.access_token = urlencode(data_store['access_token'])
        if not args.echonest_key:
            args.echonest_key = raw_input('Echo Nest API key (optional): ')

        config_args = [
            '--consumer-token', args.consumer_token,
            '--consumer-secret', args.consumer_secret,
            '--access-token', args.access_token,
        ]
        if args.echonest_key:
            config_args.extend(('--echonest-key', args.echonest_key))

        self.write_config_file(*config_args)
        print "Configured!"

    @subcommand(help='add items to a playlist')
    @argument('playlist', help='ID of playlist to add to')
    @argument('key', nargs='+', help='key of thing (song or album) to add to playlist')
    @authd
    def add(self, rdio, args):
        tracks = list()

        logging.info('Identifying those items')
        progress = self.progressbar()
        for key in progress(args.key):
            if key.startswith('t'):
                tracks.append(key)
            elif key.startswith('a'):
                albums = rdio.get(keys=key, extras='trackKeys')
                album = albums[key]
                tracks.extend(album['trackKeys'])

        logging.info('Adding items to playlist')
        progress = self.progressbar()
        for trackkey in progress(tracks):
            rdio.addToPlaylist(playlist=args.playlist, tracks=trackkey)

    @subcommand(help='remove items from a playlist')
    @argument('playlist', help='ID of playlist to add to')
    @argument('key', nargs='+', help='key of thing (song or album) to remove from playlist')
    @authd
    def remove(self, rdio, args):
        tracks_to_remove = list()

        logging.info('Identifying those items')
        progress = self.progressbar()
        for key in progress(args.key):
            if key.startswith('t'):
                tracks_to_remove.append(key)
            elif key.startswith('a'):
                albums = rdio.get(keys=key, extras='trackKeys')
                album = albums[key]
                tracks_to_remove.extend(album['trackKeys'])

        logging.info('Removing items from playlist')
        playlist_trackkeys = rdio.get(keys=args.playlist, extras='trackKeys')[args.playlist]['trackKeys']

        for trackkey in tracks_to_remove:
            if trackkey in playlist_trackkeys:
                trackindex = playlist_trackkeys.index(trackkey)
                rdio.removeFromPlaylist(playlist=args.playlist, tracks=trackkey, index=trackindex, count=1)
                playlist_trackkeys.remove(trackkey)


    @subcommand(help='list your playlists')
    @authd
    def playlists(self, rdio, args):
        playlists = rdio.getPlaylists()

        cols = ['Name', 'Owner', 'Relationship', 'Key']
        table = self.table(cols)
        table.align = 'l'
        for pl in playlists['owned']:
            table.add_row([pl['name'], pl['owner'], 'Owner', pl['key']])
        for pl in playlists['collab']:
            table.add_row([pl['name'], pl['owner'], 'Collaborator', pl['key']])
        for pl in playlists['subscribed']:
            table.add_row([pl['name'], pl['owner'], 'Subscriber', pl['key']])
        print(table)

    def print_tracks_in_thing(self, rdio, thing):
        trackkeys = thing['trackKeys']
        trackdata = rdio.get(keys=','.join(trackkeys))
        tracks = [trackdata[trackkey] for trackkey in trackkeys]

        cols = ['#', 'Title', 'Artist', 'Album', 'Time', 'Key']
        table = self.table(cols)
        table.align = 'l'
        table.align['#'] = 'r'
        for i, track in enumerate(tracks, 1):
            duration_secs = track['duration']
            duration = '%d:%02d' % (duration_secs / 60, duration_secs % 60)
            table.add_row([i, track['name'], track['artist'], track['album'], duration, track['key']])
        print(table)

    def print_albums_in_thing(self, rdio, thing):
        tracks = thing['tracks']
        albumkeys = set([track['albumKey'] for track in tracks])
        albumdata = rdio.get(keys=','.join(albumkeys))
        albums = [albumdata[albumkey] for albumkey in albumkeys]

        cols = ['#', 'Artist', 'Album', 'Key']
        table = self.table(cols)
        table.align = 'l'
        table.align['#'] = 'r'
        for i, album in enumerate(albums, 1):
            table.add_row([i, album['artist'], album['name'], album['key']])
        print(table)

    def show_playlist(self, rdio, playlist, args):
        print "%(name)s\n%(owner)s\n%(shortUrl)s\n" % playlist
        if args.group_by == "album":
            self.print_albums_in_thing(rdio, playlist)
        else:
            self.print_tracks_in_thing(rdio, playlist)

    def show_artist(self, rdio, artist, args):
        print "%(name)s\n%(length)d songs on %(albumCount)d albums\n%(shortUrl)s\n" % artist

        albums = rdio.getAlbumsForArtist(artist=artist['key'], featuring='true')

        cols = ['Name', 'Artist', 'Time', 'Key']
        table = self.table(cols)
        table.align = 'l'
        for album in albums:
            duration_secs = album['duration']
            duration = '%d:%02d' % (duration_secs / 60, duration_secs % 60)
            table.add_row([album['name'], album['artist'], duration, album['key']])
        print(table)

    def show_album(self, rdio, album, args):
        duration_secs = album['duration']
        duration = '%d:%02d' % (duration_secs / 60, duration_secs % 60)
        print ("%(name)s\n%(length)d songs (%%s)\n%(shortUrl)s\n" % album) % (duration,)

        self.print_tracks_in_thing(rdio, album)

    def show_track(self, rdio, track, args):
        cols = ['#', 'Title', 'Artist', 'Album', 'Time', 'Key']
        table = self.table(cols)
        table.align = 'l'
        for track in (track,):
            duration_secs = track['duration']
            duration = '%d:%02d' % (duration_secs / 60, duration_secs % 60)
            table.add_row([track['trackNum'], track['name'], track['artist'], track['album'], duration, track['key']])
        print(table)

    @subcommand(help='show a playlist, artist, album or track')
    @argument('key', help='the key of the thing to show')
    @argument('--group-by', '-g',
          dest='group_by',
          choices=['track', 'album'],
          default='album',
          help="group results by track or album")
    @authd
    def show(self, rdio, args):
        things = rdio.get(keys=args.key, extras='trackKeys,albumCount,tracks')
        thing = things[args.key]

        show_funcs = {
            'p': self.show_playlist,
            'r': self.show_artist,
            'a': self.show_album,
            't': self.show_track,
        }

        thing_type = thing['type']
        try:
            func = show_funcs[thing_type]
        except KeyError:
            raise NotImplementedError('Unknown Rdio thing type %r' % thing_type)

        func(rdio, thing, args)

    @subcommand(help='open a playlist, artist, album or track in your web browser')
    @argument('key', help='the key of the thing to open')
    @authd
    def open(self, rdio, args):
        things = rdio.get(keys=args.key)
        thing = things[args.key]

        logging.info("Opening URL %s", thing['shortUrl'])
        webbrowser.open(thing['shortUrl'])

    def sort_playlist(self, rdio, by, args):
        playlists = rdio.get(keys=args.playlist, extras='trackKeys')
        playlist = playlists[args.playlist]
        trackkeys = playlist['trackKeys']
        by = tuple(by)

        # Let's add the sorted tracks before deleting the existing ones, so
        # if deletion fails you have duplicates instead of an empty playlist.
        if by == ('key',):
            # Abuse Rdio's auto-sort in addToPlaylist, instead of laborious
            # sorting and re-adding here.
            rdio.addToPlaylist(playlist=args.playlist, tracks=','.join(trackkeys))
        else:
            if by == ('shuffle',):
                # We don't care about the track data, so don't fetch it.
                sorted_trackkeys = list(trackkeys)
                shuffle(sorted_trackkeys)
            else:
                trackdata = rdio.get(keys=','.join(trackkeys))
                sorted_tracks = sorted(trackdata.itervalues(),
                    key=lambda x: tuple(x.get(by_field) for by_field in by))
                sorted_trackkeys = [track['key'] for track in sorted_tracks]

            logging.debug('Original tracks: %r', trackkeys)
            logging.debug('Sorted tracks:   %r', sorted_trackkeys)

            # Apparently Rdio sorts tracks in addToPlaylist first (?!) so
            # we have to add them one by one.
            progress = self.progressbar()
            for trackkey in progress(sorted_trackkeys):
                rdio.addToPlaylist(playlist=args.playlist, tracks=trackkey)

        # Finally, remove the original order from the front of the playlist.
        rdio.removeFromPlaylist(playlist=args.playlist, index=0, count=len(trackkeys), tracks=','.join(trackkeys))

        logging.info('Sorted playlist "%s"', playlist['name'])

    @subcommand(help='sort a playlist')
    @argument('playlist', help='the playlist key')
    @argument('--by', action='append', help='the track property to sort by (try "artist" or "name"; default "key")')
    @authd
    def sort(self, rdio, args):
        self.sort_playlist(rdio, args.by or ('key',), args)

    @subcommand(help='shuffle a playlist')
    @argument('playlist', help='the playlist key')
    @authd
    def shuffle(self, rdio, args):
        self.sort_playlist(rdio, ('shuffle',), args)

    @subcommand(help='search for an album, artist or track')
    @argument('query', nargs='*', help='the text to search for')
    @argument('--type', dest='types', action='append', help='a type of Rdio item to search for (default: track, artist, album)')
    @argument('--sort', help='field by which to order results (default: relevance)')
    @argument('--artist', default=[], nargs='+', help='search text to require in the artist field')
    @argument('--album', default=[], nargs='+', help='search text to require in the album field')
    @argument('--track', default=[], nargs='+', help='search text to require in the track name field')
    @argument('--count', type=int, default=15, help='the number of results to show (default: 15)')
    @authd
    def search(self, rdio, args):
        query = ' '.join(chain(args.artist, args.album, args.track, args.query))
        logging.debug('Whole query is: %r', query)
        types = ','.join(t.title() for t in args.types) if args.types else 'Artist,Album,Track'
        resultset = rdio.search(query=query, types=types, count=args.count)

        results = (result for result in resultset['results'] if result['type'] in ('t', 'a', 'r'))
        if args.artist:
            results = (result for result in results if ' '.join(args.artist).lower() in (result['name'] if result['type'] == 'r' else result['artist']).lower())
        if args.album:
            results = (result for result in results if ' '.join(args.album).lower() in (result['name'] if result['type'] == 'a' else result.get('album', '')).lower())
        if args.track:
            results = (result for result in results if result['type'] == 't' and ' '.join(args.track).lower() in result['name'].lower())

        cols = ['Track', 'Album', 'Artist', 'Key']
        table = self.table(cols)
        for result in results:
            result_name = u'%(name)s' if result['type'] == 'r' else u'%(name)s by %(artist)s'
            if result['type'] == 't':
                table.add_row([result['name'], result['album'], result['artist'], result['key']])
            elif result['type'] == 'a':
                table.add_row(['', result['name'], result['artist'], result['key']])
            elif result['type'] == 'r':
                table.add_row(['', '', result['name'], result['key']])
            else:
                raise NotImplementedError("Unexpected Rdio object type %r in search results" % result['type'])
        if args.sort:
            print(table.get_string(sortby=args.sort.title()))
        else:
            print(table)

    @subcommand(help="show your network's heavy rotation")
    @argument('--count', type=int, default=15, help='the number of results to show (default: 15)')
    @argument('--new-to-me', action='store_true', help="omit albums in your heavy rotation")
    @authd
    def heavy(self, rdio, args):
        user = rdio.currentUser()
        user_key = user['key']

        albums = rdio.getHeavyRotation(user=user_key, friends='true', type='albums', limit=args.count * 2)
        if args.new_to_me:
            your_albums = rdio.getHeavyRotation(user=user_key, type='albums', limit=args.count)
            your_album_keys = set(album['key'] for album in your_albums)
            albums = (album for album in albums if album['key'] not in your_album_keys)
        albums = sorted(albums, key=lambda a: a['hits'], reverse=True)
        albums = islice(albums, args.count)

        cols = ['Hits', 'Artist', 'Album', 'Friends', 'Key']
        table = self.table(cols)
        for album in albums:
            friends = u', '.join(u['firstName'] for u in album['users'])
            table.add_row([album['hits'], album['artist'], album['name'], friends, album['key']])
        print(table)

    def echonest_query(self, path, query, args):
        query = dict(query)
        query.update({
            'api_key': args.echonest_key,
            'format': 'json',
        })
        url = urlunsplit(('http', 'developer.echonest.com', path, urlencode(query), ''))
        logging.debug("Asking Echo Nest for: %s", url)

        http = rdioapi.httplib2.Http()
        resp, cont = http.request(url)
        if resp.status != 200:
            logging.error('Unexpected response from Echo Nest: %d %s', resp.status, resp.reason)
            logging.error(cont)
            return

        improv = json.loads(cont)
        logging.debug("Playlist response: %r", improv)
        if improv['response']['status']['code'] != 0:
            raise EchoNestError(improv)
        return improv

    @subcommand(help='create a playlist similar to a track')
    @argument('track', help='the track to improvise from (key)')
    @argument('--playlist', help='the playlist to append to (key; by default, makes a new playlist)')
    @argument('--preview', action='store_true', help="show the playlist but don't create it")
    @authd
    def improvise(self, rdio, args):
        if not args.echonest_key:
            print "Echo Nest API key is required to improvise a playlist. See: http://developer.echonest.com/"
            return

        tracks = rdio.get(keys=args.track)
        track = tracks[args.track]
        trackname, artistname = track['name'], track['artist']

        query = {
            'song_id': 'rdio-us-streaming:song:%s' % args.track,
            'type': 'song-radio',
            'results': 25,
            'bucket': 'id:rdio-us-streaming',
            'limit': 'true',
        }

        try:
            improv = self.echonest_query('/api/v4/playlist/static', query, args)
        except EchoNestError, exc:
            try:
                if exc.code != 5:
                    raise
                logging.info("Oops, Echo Nest doesn't know about Rdio track %s. Trying a song search.", args.track)

                improv = self.echonest_query('/api/v4/song/search', {
                    'title': trackname,
                    'artist': artistname,
                    'results': 1,
                }, args)
                if improv['response']['status']['code'] == 5:
                    logging.error("Oops, Echo Nest doesn't seem to know about the song %s by %s (Rdio track %s).", trackname, artistname, args.track)
                    return

                songs = improv['response']['songs']
                if not songs:
                    logging.debug(repr(improv))
                    logging.error("Oops, Echo Nest doesn't seem to know about the song %s by %s (Rdio track %s).", trackname, artistname, args.track)
                    return

                query['song_id'] = songs[0]['id']
                improv = self.echonest_query('/api/v4/playlist/static', query, args)

            except EchoNestError, exc:
                logging.error("Oops, Echo Nest said: %s", str(exc))
                return
        if improv is None:
            return

        def rdio_track(song):
            foreign_ids = song['foreign_ids']
            # Sometimes our 'limit': 'true' doesn't work, I guess.
            if not foreign_ids:
                return
            assert len(foreign_ids)
            rdio_id_set = foreign_ids[0]
            rdio_full_id = rdio_id_set['foreign_id']
            rdio_bare_id = rdio_full_id.rsplit(':', 1)[-1]
            return rdio_bare_id

        improv_songs = improv['response']['songs']
        improv_tracks = [track for track in (rdio_track(song) for song in improv_songs) if track]

        if args.preview:
            thing = {'trackKeys': improv_tracks}
            self.print_tracks_in_thing(rdio, thing)
            return

        logging.info("Making a %d song playlist improvised from %s by %s.", len(improv_tracks), trackname, artistname)
        if args.playlist:
            playlistkey = args.playlist
            playlist = rdio.get(keys=playlistkey)[playlistkey]
            rdio.addToPlaylist(playlist=playlistkey, tracks=args.track)
        else:
            playlist = rdio.createPlaylist(name=datetime.now().strftime('Improvisation %Y-%m-%d'),
                description='Improvised from %s by %s (powered by Echo Nest)' % (trackname, artistname),
                tracks=args.track)
            playlistkey = playlist['key']

        progress = self.progressbar()
        for track in progress(improv_tracks):
            rdio.addToPlaylist(playlist=playlistkey, tracks=track)

        print "Playlist improvised into %s" % playlist['shortUrl']

    @subcommand(help='list or export your collection')
    @argument('outfile', type=argparse.FileType('w'), help='file to output (use - to print)')
    @argument('--json', action='store_true', help='use JSON instead of a table')
    @authd
    def collection(self, rdio, args):
        user = rdio.currentUser(extras='albumCount')
        user_key = user['key']

        album_count = user['albumCount']
        if album_count > 10:
            logging.warn("Downloading collection of %d albums (this will take a while)", album_count)
        else:
            logging.info("Downloading collection of %d albums", album_count)
        bar = self.progressbar(maxval=album_count).start()

        data = list()
        albums_processed = 0
        start = 0
        while True:
            logging.debug("Asking for albums[%d:50]", start)
            albums = rdio.getAlbumsInCollection(user=user_key, start=start, count=50, sort='dateAdded')
            if not albums:
                logging.debug("Got 0 albums back! Stopping at offset %d", start)
                break
            logging.debug("Got %d albums back", len(albums))

            for album in albums:
                num_collected_tracks = len(album['trackKeys'])
                num_album_tracks = len(album['itemTrackKeys'])
                if num_collected_tracks == num_album_tracks:
                    logging.debug("Collected all %d/%d tracks, listing complete album", num_collected_tracks, num_album_tracks)
                    data.append(album)
                else:
                    logging.debug("Collected only %d/%d tracks, asking what tracks they are", num_collected_tracks, num_album_tracks)
                    tracks = rdio.getTracksForAlbumInCollection(user=user_key, album=album['key'])
                    data.extend(tracks)

                albums_processed += 1
                bar.update(albums_processed)

            start += len(albums)

        bar.finish()

        if args.json:
            logging.debug("Dumping all that json data to %s", args.outfile.name)
            json.dump(data, args.outfile, sort_keys=True, indent=4)
        else:
            table = self.table(['Key', 'Artist', 'Album', '#', 'Track'])
            for item in data:
                if item['type'] == 'al':  # CollectionAlbums, not Albums
                    fields = ('albumKey', 'artist', 'name', None, None)
                elif item['type'] == 't':
                    fields = ('key', 'artist', 'album', 'trackNum', 'name')
                else:
                    raise NotImplementedError("Item of unknown type %r in collection data" % item['type'])
                table.add_row([item.get(x, '') for x in fields])
            table_text = table.get_string()
            args.outfile.write(table_text.encode('utf-8'))
            args.outfile.write('\n')
        logging.info("Finished")
        return

    @subcommand(help='Start playing the current song (in Rdio for Mac)')
    @macapp
    def play(self, args, rdio, k):
        if rdio.player_state.get() == k.playing:
            logging.warn("Rdio is already playing")
            return
        rdio.play()

    @subcommand(help='Pause the currently playing song (in Rdio for Mac)')
    @macapp
    def pause(self, args, rdio, k):
        if rdio.player_state.get() == k.paused:
            logging.warn("Rdio is already paused")
            return
        rdio.pause()

    @subcommand(help='Skip to the next track (in Rdio for Mac)')
    @macapp
    def next(self, args, rdio, k):
        rdio.next_track()

    @subcommand(help='Go back to the previous track (in Rdio for Mac)')
    @macapp
    def previous(self, args, rdio, k):
        rdio.previous_track()


if __name__ == '__main__':
    Rdio().run()
